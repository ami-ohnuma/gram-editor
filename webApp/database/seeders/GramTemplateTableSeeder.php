<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class GramTemplateTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('gram_templates')->insert([
            [
                'name' => '直列の単語選択（単純版）',
                'content' => '#JSGF V1.0 UTF-8;

grammar 01_sample;

//【コメント】本ルールグラマは次の５つの語句を単独の発話で音声認識するサンプルです。
//【コメント】「すずき」「やまだ」「わたべ」「わたなべ」「すずきたろう」
//【コメント】二つ以上の語句をつなげて発話しても認識しません。
//【コメント】発話「すずき」を、音声認識結果「すずき」と返すルールです。
public <name0> = すずき;

//【コメント】発話「やまだ」と「わたべ」または「わたなべ」を、音声認識結果「山田」と「渡部」で返すルールです。
public <name1> = 山田\やまだ;
public <name2> = 渡部\わたべ/わたなべ;

//【コメント】発話「すずきたろう」を、音声認識結果「鈴木たろう」と返すルールです。
public <name3> = 鈴木たろう\すずきたろう;',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '直列の単語選択（多要素版）',
                'content' => '#JSGF V1.0 UTF-8;

grammar 02_sample;

//【コメント】本ルールグラマは二つ以上の語句の組み合わせを発話を音声認識するサンプルです。
//【コメント】発話「すずきたろう」を、音声認識結果「鈴木太郎」と返すルールです。
//【コメント】音声認識結果「鈴木太郎」は「鈴木」と「太郎」の２単語の組み合わせとして返ってきます。
public <suzuki_taro> = <surname0> <name0>;

//【コメント】行頭にpublicが付いていない < > の宣言は、それ単体を発話しても音声認識されません。
//【コメント】　例：「すずき」と発話しても音声認識結果「鈴木」は得られません。
//【コメント】行頭にpublicが付いていない < > の宣言はpublicが付いている宣言から呼び出して使用します。
//【コメント】行頭にpublicが付いていない < > の宣言は組み合わせて使用できます。

<surname0> = 鈴木\すずき;
<surname1> = 佐藤\さとう;
<surname2> = 田中\たなか;

<name0> = 太郎\たろう;
<name1> = 次郎\じろう;
<name2> = 花子\はなこ;

//【コメント】発話「すずきはなこ」を、音声認識結果「鈴木花子」と返すルールです。
public <suzuki_hanako> = <surname0> <name2>;

//【コメント】行頭にpublicが付いていない < > の宣言はプライベートルールといいます。
//【コメント】プライベートルールを組み合わせてルールグラマを記述することで効率的なルールを書けます。
//【コメント】行頭にpublicが付いている < > の宣言はパブリックルールといいます。
//【コメント】パブリックルールは、プライベートルールを組み合わせて書くことができます。
//【コメント】上記のプライベートルールは次のようにも組み合わせることができます。
//【コメント】上から佐藤太郎、佐藤次郎、佐藤花子、田中太郎、田中次郎、田中花子を音声認識します。
public <satou_0> = <surname1> <name0>;
public <satou_1> = <surname1> <name1>;
public <satou_2> = <surname1> <name2>;

public <tanaka_0> = <surname2> <name0>;
public <tanaka_1> = <surname2> <name1>;
public <tanaka_2> = <surname2> <name2>;',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '並列の単語選択（単純版）',
                'content' => '#JSGF V1.0 UTF-8;

grammar 03_sample;

//【コメント】本ルールグラマは二つ以上の語句を並列で音声認識するサンプルです。
//【コメント】発話「すずき」または「さとう」を、音声認識結果「すずき」または「さとう」と返すルールです。
public <name0> = すずき | さとう;

//【コメント】上記のように２つのうちどちらかを音声認識させたい場合はそのまま２つpublicのルールを書いても実現できますが、音声認識させたい語句を | で繋げることでどちらか一方の語句を音声認識させることが可能になります。
//【コメント】複数の語句を | で繋げる場合、次のように改行して記述することもできます。
//【コメント】発話「とうきょう」「さいたま」「ちば」「とちぎ」のどれかを音性認識するサンプルです。
public <name1> = 東京\とうきょう |
埼玉\さいたま |
千葉\ちば |
栃木\とちぎ ;',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '並列の単語選択（多要素版）',
                'content' => '#JSGF V1.0 UTF-8;

grammar 04_sample;

//【コメント】本ルールグラマは二つ以上の語句を組み合わせて並列で音声認識するサンプルです。
//【コメント】「りんご」「みかん」「なすび」のどれかを、「定食」「盛り合わせ」「食べ放題」のどれかと組み合わせて音声認識させるルールです。
//【コメント】( と ) で囲むことによりその中は一つの語句として扱われます。
public <lunch> = ( <food1> | <food2> | <food3> ) ( <plan1> | <plan2> | <plan3> );

<food1> = りんご;
<food2> = みかん;
<food3> = なすび;

<plan1> = 定食\ていしょく;
<plan2> = 盛り合わせ\もりあわせ;
<plan3> = 食べ放題\たべほうだい;

//【コメント】上記例は次のように９パターンの音声認識が可能です
//【コメント】りんご定食、りんご盛り合わせ、りんご食べ放題
//【コメント】みかん定食、みかん盛り合わせ、みかん食べ放題
//【コメント】なすび定食、なすび盛り合わせ、なすび食べ放題',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '省略できる単語選択',
                'content' => '#JSGF V1.0 UTF-8;

grammar 05_sample;

//【コメント】本ルールグラマは二つ以上の語句を組み合わせて省略を可能とする音声認識のサンプルです。
//【コメント】発話「うどん」と「きつねうどん」を音声認識するルールです。
//【コメント】[ と ] で囲まれた内部は省略が可能です。
public <dinner> = [ きつね ] うどん;

//【コメント】上記のような例は次のように２つルールを書いても同じような結果が得られますが、同じ語句が（例でいうと「うどん」）複数あると修正時にミスが起きやすいので注意が必要です。。
//【コメント】　public <dinner1> = きつねうどん;
//【コメント】　public <dinner2> = うどん;
//【コメント】並列する音声認識と省略可能な音声認識を組み合わせると次のようなルールも書けます。
public <breakfast> = 今日は\きょうは <main> [と <sub> ] を [ 家族\かぞく と [ 沢山\たくさん ] ] たべた;

<main> = 目玉焼き\めだまやき | 鮭の塩焼き\さけのしおやき | 食パン\しょくぱん;
<sub> = お味噌汁\おみそしる | 野沢菜\のざわな | チーズ\ちーず;

//【コメント】上記 public <breakfast> は次のように音声認識可能な発話が分岐しています。
//【コメント】今日は <main>     と<sub> (省略可能) 　を 　家族と(省略可能) 沢山(省略可能)　食べた
//【コメント】　　　 お味噌汁　　 お味噌汁
//【コメント】　　　 鮭の塩焼き　 野沢菜
//【コメント】　　　 食パン　　　 チーズ',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '電話番号入力',
                'content' => '#JSGF V1.0 UTF-8;

grammar 06_sample;

//【コメント】本ルールグラマは10桁と11桁の電話番号を入力する音声認識のサンプルです。
public <number01> = <0_9> <0_9> [の] <0_9> <0_9> <0_9> <0_9> [の] <0_9> <0_9> <0_9> <0_9>;
public <number02> = <0_9> <0_9> <0_9> <0_9> [の] <0_9> <0_9> [の] <0_9> <0_9> <0_9> <0_9>;
public <number03> = <0_9> <0_9> <0_9> [の] <0_9> <0_9> <0_9> <0_9> [の] <0_9> <0_9> <0_9> <0_9>;

<0_9> = (0\ぜろ/れい/まる {0} | 1\いち {1} | 2\にー/に {2} | 3\さん {3} | 4\よん {4} | 5\ごー/ご {5} | 6\ろく {6} | 7\なな {7} | 8\はち {8} | 9\きゅー {9});

//【コメント】上の例では音声認識結果は表記の数字（0など）と読み（「ぜろ」など）他に、 { と } で囲まれた中の値を返します。この { と } で囲まれた内部をタグといいます。
//【コメント】[ と ] で囲まれている「の」は発話を省略できます。',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '郵便番号入力',
                'content' => '#JSGF V1.0 UTF-8;

grammar 07_sample;

//【コメント】本ルールグラマは7桁郵便番号を入力する音声認識のサンプルです。
public <number03> = [ゆうびんばんごう] <0_9> <0_9> <0_9> [の] <0_9> <0_9> <0_9> <0_9>;

<0_9> = (0\ぜろ/れい/まる {0} | 1\いち {1} | 2\にー/に {2} | 3\さん {3} | 4\よん {4} | 5\ごー/ご {5} | 6\ろく {6} | 7\なな {7} | 8\はち {8} | 9\きゅー {9});

//【コメント】上の例では音声認識結果は表記の数字（0など）と読み（「ぜろ」など）他に、 { と } で囲まれた中の値を返します。この { と } で囲まれた内部をタグといいます。
//【コメント】[ と ] で囲まれている「の」と「ゆうびんばんごう」は発話を省略できます。',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '0から9999までの数値入力',
                'content' => '#JSGF V1.0 UTF-8;

grammar 08_sample;

//【コメント】本ルールグラマは0から9999までの数値を入力する音声認識のサンプルです。
public <number0_9999> = <num1000> [ <num999> ] | <num999>;

<num999> = ( <num100> [<num99>] | <num99> );
<num99> = ( <num10> [<num0>] | <num0> );

<num0> = (0\ぜろ/れい/まる {0} | 1\いち {1} | 2\にー/に {2} | 3\さん {3} | 4\よん {4} | 5\ごー/ご {5} | 6\ろく {6} | 7\なな {7} | 8\はち {8} | 9\きゅー {9});

<num10> = ( 10\じゅー {10} | 20\にじゅー {20} | 30\さんじゅー {30} | 40\よんじゅー {40} | 50\ごじゅー {50} | 60\ろくじゅー {60} | 70\ななじゅー {70} | 80\はちじゅー {80} | 90\きゅーじゅー {90});

<num100> = ( 100\ひゃく {100} | 200\にひゃく {200} | 300\さんびゃく {300} | 400\よんひゃく {400} | 500\ごひゃく {500} | 600\ろっぴゃく {600} | 700\ななひゃく {700} | 800\はっぴゃく {800} | 900\きゅーひゃく {900});

<num1000> = ( 1000\せん/いっせん {1000} | 2000\にせん {2000} | 3000\さんぜん {3000} | 4000\よんせん {4000} | 5000\ごせん {5000} | 6000\ろくせん {6000} | 7000\ななせん {7000} | 8000\はっせん {8000} | 9000\きゅーせん {9000});

//【コメント】上の例では音声認識結果は表記の数字（0など）と読み（「ぜろ」など）他に、 { と } で囲まれた中の値を返します。この { と } で囲まれた内部をタグといいます。',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => 'マイナス99.9から100.0までの数値入力',
                'content' => '#JSGF V1.0 UTF-8;

grammar 09_sample;

//【コメント】本ルールグラマはマイナス99から100までの数値を入力する音声認識のサンプルです。
public <number0_100> = 100\ひゃく {100} | <num99>;
public <number_h_99> = <hyphen> <num99>;

<num99> = ( <num10> [<num0>] | <num0> );

<num0> = (0\ぜろ/れい/まる {0} | 1\いち {1} | 2\にー/に {2} | 3\さん {3} | 4\よん {4} | 5\ごー/ご {5} | 6\ろく {6} | 7\なな {7} | 8\はち {8} | 9\きゅー {9});

<num10> = ( 10\じゅー {10} | 20\にじゅー {20} | 30\さんじゅー {30} | 40\よんじゅー {40} | 50\ごじゅー {50} | 60\ろくじゅー {60} | 70\ななじゅー {70} | 80\はちじゅー {80} | 90\きゅーじゅー {90});

<hyphen> = -\まいなす/はいふん { - };

//【コメント】上の例では音声認識結果は表記の数字（0など）と読み（「ぜろ」など）他に、 { と } で囲まれた中の値を返します。この { と } で囲まれた内部をタグといいます。',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '物品名と数入力',
                'content' => '#JSGF V1.0 UTF-8;

grammar 10_sample;

//【コメント】本ルールグラマは物品と数を入力する音声認識のサンプルです。
public <num> = <cho> [を] [<ban>] [個\こ];

<cho> = (
とちおとめ |
あまおう |
さちのか
);

<ban> = (<0_9> | <10_90> | <10_90> <0_9> );

<0_9> = (0\ぜろ/れい | 1\いち | 2\に/にー | 3\さん | 4\よん | 5\ご/ごー | 6\ろく | 7\なな  | 8\はち | 9\きゅー );

<10_90> = (10\じゅー | 20\にじゅー | 30\さんじゅー | 40\よんじゅー | 50\ごじゅー | 60\ろくじゅー | 70\ななじゅー | 80\はちじゅー | 90\きゅーじゅー );',
                'created_at' => date('Y-m-d H:i:s'),
            ],
            [
                'name' => '豊島区の地番入力',
                'content' => '#JSGF V1.0 UTF-8;

grammar 11_sample;

//【コメント】本ルールグラマは東京都豊島区の地番を入力する音声認識のサンプルです。
public <num> = [ 東京都\とうきょうと ] [ 豊島区\としまく ] <cho> [<choban>] [の] [<ban>] [の] [<gou>];

<cho> = (
池袋\いけぶくろ |
池袋本町\いけぶくろほんちょう |
上池袋\かみいけぶくろ |
北大塚\きたおおつか |
雑司ヶ谷\ぞうしがや |
高田\たかだ |
西池袋\にしいけぶくろ |
東池袋\ひがしいけぶくろ |
南池袋\みなみいけぶくろ |
目白\めじろ |
駒込\こまごめ |
巣鴨\すがも |
南大塚\みなみおおつか |
西巣鴨\にしすがも |
南長崎\みなみながさき |
長崎\ながさき |
千早\ちはや |
要町\かなめちょう |
高松\たかまつ |
千川\せんかわ
);

<choban> = (
一丁目\いっちょうめ |
二丁目\にちょうめ |
三丁目\さんちょうめ |
四丁目\よんちょうめ |
五丁目\ごちょうめ |
六丁目\ろくちょうめ |
七丁目\ななちょうめ
);

<ban> = (<0_9> | <10_90> | <10_90> <0_9> ) [ 番\ばん ];

<gou> = (<0_9> | <10_90> | <10_90> <0_9> ) [ 号\ごう ];

<0_9> = (0\ぜろ/れい | 1\いち | 2\に/にー | 3\さん | 4\よん | 5\ご/ごー | 6\ろく | 7\なな  | 8\はち | 9\きゅー );

<10_90> = (10\じゅー | 20\にじゅー | 30\さんじゅー | 40\よんじゅー | 50\ごじゅー | 60\ろくじゅー | 70\ななじゅー | 80\はちじゅー | 90\きゅーじゅー );',
                'created_at' => date('Y-m-d H:i:s'),
            ]
        ]);
    }
}
